1.关于盒子宽度下列正确的是（D）

(A) 盒子宽：就是width的大小

(B) 盒子宽： padding-left + width + padding-right 

(C) 盒子宽： border-left + width + border-right 

(D) 盒子宽： border-left+ padding-left + width + padding-right + border-right


2.关于盒子高度下列正确的是（D）

(A) 盒子高：就是height的大小

(B) 盒子高：padding-top +height + padding-bottom 

(C) 盒子高：border-top + height + border-bottom

(D) 盒子高：border-top + padding-top +height + padding-bottom + border-bottom

3关于根据下列代码计算 盒子宽高下列说法正确的是（B）

		div {

​			width: 200px;

​			height: 200px;

​			border: 1px solid #000000;

​			border-top: 5px solid blue;

​			padding: 50px;

​			padding-left: 100px;

​		}

(A) 宽度为200px 高度为200px

(B) 宽度为352px 高度为306px

(C) 宽度为302px 高度为307px

(D) 宽度为302px 高度为252px


4.外边距合并及解决方案


  4.1外边距合并就是有a、b两个盒子互相给对方一个外边距并不会叠加起来，而是谁的外边距长就以谁的为准
  4.2 解决办法就是只给一个盒子外边距就行	


5.用公式写两个列子
  /*外盒尺寸计算（元素空间尺寸）*/
  Element空间高度 = content height + padding + border + margin
  Element 空间宽度 = content width + padding + border + margin
  /*内盒尺寸计算（元素实际大小）*/
  Element Height = content height + padding + border （Height为内容高度）
  Element Width = content width + padding + border （Width为内容宽度）


<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <title>盒子尺寸计算</title>
    <style>
        .a {
            width: 200px;
            height: 200px;
            padding: 20px;
            border: 5px solid hotpink;
            margin: 100px 100px;
        }

        /* widht  padding   border   margin */
        /*外盒尺寸计算的宽度:200px + 20px*2 + 5px*2 + 100px*2= 450px*/
        /*外盒尺寸计算的高度:200px + 20px*2 + 5px*2 + 100px*2 = 450px*/
        .b {
            width: 200px;
            height: 200px;
            padding: 20px;
            border: 5px solid pink;
            margin: 100px 100px;
        }

        /*                  width   padding   border  */
        /*内盒尺寸计算的宽度:200px + 20px*2 + 5px*2 = 250px*/
        /*内盒尺寸计算的高度:200px + 20px*2 + 5px*2 = 250px*/
    </style>
</head>

<body>
    <div class="a"></div>

    <div class="b"></div>

</body>

</html>


6.什么是浮动？以及清除浮动的方法（4种）

  6.1浮动是指会使元素向左或向右移动，其周围的元素也会重新排列

  方法一:
          /* 额外标签法 */
        .clear {
            clear: both
        }
  方法二:
  使用CSS的overflow属性
  方法三:
  .clearfix::after {
            content: "";
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }

        .clearfix {
            /* IE6、7专有 */
            *zoom: 1;
        }
  方法四:
  /* 双伪元素清除浮动 */
        .clearfix:before,
        .clearfix:after {
            content: "";
            display: table;
        }

        .clearfix::after {
            clear: both;
        }

        .clearfix {
            /* IE6、7专有 */
            *zoom: 1;
        }

7.定位都有哪些，以及各自的特点

  
  7.1 position:static  默认定位
  7.2 position:relative  相对于自身定位
  7.3 position:absolute  相对于父元素定位
  7.4 position:fixed     相对于浏览器视口本身定位


8元素的显示与隐藏（display 、visibility、overflow）的特点？

 
  8.1display 隐藏的元素不占位置
  8.2visibility 隐藏的元素占位置
  8.3overflow 可以隐藏溢出的元素

9.单行出现省略号与多行出现省略号的方法？



 9.1 单行出现省略号:
  overflow: hidden;
  text-overflow:ellipsis;
  white-space: nowrap;

  9.2多行出现省略号:
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  overflow: hidden;